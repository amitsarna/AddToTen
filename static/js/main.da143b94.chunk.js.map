{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","state","started","currentScore","numbers","toggleStartStop","bind","i","slice","length","shift","setState","handleClick","firstNumber","Math","ceil","random","startTime","Date","now","interval","setTimeout","update","push","max","clearInterval","timer","buttonText","numberString","join","align","renderSquare","height","Game","ReactDOM","render","document","getElementById"],"mappings":"yOAIMA,G,6KACQ,IAAD,OACP,OACE,4BAAQC,UAAU,SAASC,QAAS,kBAAM,EAAKC,MAAMD,YAClDE,KAAKD,MAAME,W,GAJDC,IAAMC,YAUnBC,E,kDAEJ,WAAYL,GACX,IAAD,8BACE,cAAMA,IAqBDM,MAAQ,CACXC,SAAS,EACTC,aAAe,EACfC,QAAU,IAGZ,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBA5BzB,E,wDA+BYC,GAEV,IAAMH,EAAUR,KAAKK,MAAMG,QAAQI,QAEZ,IAAnBJ,EAAQK,SAKRF,IAAO,GAFAH,EAAQ,KAIjBA,EAAQM,QACRd,KAAKe,SAAS,CACZP,QAASA,EACTD,aAAcP,KAAKK,MAAME,aAAe,Q,mCAMjCI,GAAI,IAAD,OAEd,OAAO,kBAACf,EAAD,CAAQK,MAAOU,EAAGb,QAAS,kBAAM,EAAKkB,YAAYL,Q,wCAI1D,IAAD,OACE,GAAIX,KAAKK,MAAMC,QAEbN,KAAKe,SAAS,CACZT,SAAS,EACTE,QAAU,SAKd,CAKE,IAAIS,EAAc,CAACC,KAAKC,KAAqB,EAAhBD,KAAKE,WAElCpB,KAAKe,SAAS,CACZT,SAAS,EACTC,aAAe,EACfc,UAAYC,KAAKC,MACjBf,QAAUS,IAGZ,IAAIO,EAAW,IAuBfC,YArBa,SAATC,IACF,IAAIlB,EAAU,EAAKH,MAAMG,QAAQI,QAE5B,EAAKP,MAAMC,UAGZE,EAAQK,OAAS,EAEnB,EAAKJ,mBAILD,EAAQmB,KAAKT,KAAKC,KAAqB,EAAhBD,KAAKE,WAC5B,EAAKL,SAAS,CACZP,QAAUA,IAEZgB,EAAWN,KAAKU,IAAI,GAAI,IAAkC,EAA1B,EAAKvB,MAAME,cAC3CkB,WAAWC,EAAQF,OAIJA,M,6CAKrBK,cAAc7B,KAAK8B,S,+BAKnB,IAAIC,EAAa/B,KAAKK,MAAMC,QAAU,OAAS,QAE3CE,EAAUR,KAAKK,MAAMG,QAAQI,QAE7BoB,EAAehC,KAAKK,MAAMC,QAAUE,EAAQyB,KAAK,KAAO,iBAE5D,OACE,6BACE,wBAAIC,MAAM,UAAV,YACA,yBAAKA,MAAM,SACRF,EACD,6BAAK,8BAEP,yBAAKnC,UAAU,aACZG,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,IAErB,yBAAKtC,UAAU,aACZG,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,IAErB,yBAAKtC,UAAU,aACZG,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,IAErB,yBAAKD,MAAM,UACT,6BACA,4BAAQE,OAAO,QAAQtC,QAASE,KAAKS,iBAAkBsB,GACvD,6BAAK,6BAHP,WAIW/B,KAAKK,MAAME,mB,GArJVL,IAAMC,WA4JpBkC,E,uKAEF,OACE,yBAAKxC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACO,EAAD,OAEF,yBAAKP,UAAU,aACb,8BACA,mC,GATSK,IAAMC,WAkBzBmC,IAASC,OACP,kBAACF,EAAD,MACAG,SAASC,eAAe,W","file":"static/js/main.da143b94.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <button className=\"square\" onClick={() => this.props.onClick()}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    \r\n    constructor(props)\r\n    {\r\n      super(props);\r\n\r\n      // var squares = Array(25).fill(null);\r\n\r\n      // for (var i = 0; i < 25; ++i)\r\n      // {\r\n      //   var newword = \"\"; \r\n      //   while(true)\r\n      // {\r\n      //   const rand = Math.floor(Math.random() * this.originalWordList.length);\r\n      //   const word = this.originalWordList[rand];\r\n      //   if (!squares.includes(word))\r\n      //   {\r\n      //     newword = word;\r\n      //     break;\r\n      //   }\r\n      // }\r\n\r\n      // squares[i] = newword;\r\n      // }\r\n\r\n      this.state = {\r\n        started: false,\r\n        currentScore : 0,\r\n        numbers : []\r\n      };\r\n\r\n      this.toggleStartStop = this.toggleStartStop.bind(this);\r\n    }\r\n\r\n    handleClick(i) \r\n    {\r\n      const numbers = this.state.numbers.slice()\r\n\r\n      if (numbers.length === 0)\r\n        return\r\n\r\n      var head = numbers[0]\r\n      \r\n      if (i === (10 - head))\r\n      {\r\n        numbers.shift()\r\n        this.setState({\r\n          numbers: numbers,\r\n          currentScore: this.state.currentScore + 1\r\n        })\r\n      }\r\n    }\r\n    \r\n\r\n    renderSquare(i) {\r\n      //return <Square value={this.state.squares[i]} onClick={() => this.handleClick(i)} />;\r\n      return <Square value={i} onClick={() => this.handleClick(i)} />;\r\n    }\r\n\r\n    toggleStartStop()\r\n    {\r\n      if (this.state.started)\r\n      {\r\n        this.setState({\r\n          started: false,\r\n          numbers : []\r\n        })\r\n\r\n      }\r\n      else\r\n      {\r\n        // const squares = this.state.squares.slice();\r\n        // var word = squares[Math.floor(Math.random() * 25)]\r\n        // var endTime = Date.now() + 60000\r\n\r\n        var firstNumber = [Math.ceil(Math.random() * 9)]\r\n\r\n        this.setState({\r\n          started: true,\r\n          currentScore : 0,\r\n          startTime : Date.now(),\r\n          numbers : firstNumber\r\n        })\r\n\r\n        var interval = 1000;\r\n\r\n        var update = () => {\r\n          var numbers = this.state.numbers.slice()\r\n\r\n          if (!this.state.started)\r\n            return\r\n\r\n          if (numbers.length > 9)\r\n          {\r\n            this.toggleStartStop()\r\n          }\r\n          else\r\n          {\r\n            numbers.push(Math.ceil(Math.random() * 9))\r\n            this.setState({\r\n              numbers : numbers\r\n            })\r\n            interval = Math.max(10, 1000 - (this.state.currentScore * 2))\r\n            setTimeout(update, interval)\r\n          }\r\n        }\r\n\r\n        setTimeout(update, interval)\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      clearInterval(this.timer);\r\n    }\r\n  \r\n    render() {\r\n  \r\n      var buttonText = this.state.started ? \"Stop\" : \"Start\";\r\n\r\n      var numbers = this.state.numbers.slice()\r\n\r\n      var numberString = this.state.started ? numbers.join(\",\") : \"Press Start ..\"\r\n\r\n      return (\r\n        <div>\r\n          <h1 align=\"center\">AddToTen</h1>\r\n          <div align=\"right\">\r\n            {numberString}\r\n            <br/><br/>\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n            {this.renderSquare(9)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n          </div>\r\n          <div align=\"center\">\r\n            <br/>\r\n            <button height=\"200px\" onClick={this.toggleStartStop}>{buttonText}</button>\r\n            <br/><br/>\r\n            Score : {this.state.currentScore}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}